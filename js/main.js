// Generated by CoffeeScript 1.9.3
(function() {
  var DrawingCanvas, Rectangle, Tree,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DrawingCanvas = (function() {
    function DrawingCanvas($el) {
      this.$el = $el;
      this.setSizes = bind(this.setSizes, this);
      this.el = this.$el[0];
      $(window).resize(this.setSizes);
      this.setSizes();
      this.ctx = this.el.getContext('2d');
    }

    DrawingCanvas.prototype.setSizes = function() {
      if (this.el.width !== this.$el.width()) {
        this.el.width = this.$el.width();
      }
      if (this.el.height !== this.$el.height()) {
        return this.el.height = this.$el.height();
      }
    };

    DrawingCanvas.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, this.el.width, this.el.height);
    };

    return DrawingCanvas;

  })();

  $(function() {
    var tree;
    tree = new Tree;
    return tree.draw();
  });

  Rectangle = (function() {
    function Rectangle(position, size1) {
      this.position = position;
      this.size = size1;
      this.layer = 1;
    }

    Rectangle.prototype.brownHue = 40;

    Rectangle.prototype.greenHue = 115;

    Rectangle.prototype.saturation = 90;

    Rectangle.prototype.draw = function(ctx) {
      var brightness, hue;
      this.ctx = ctx;
      if (this.layer < 5) {
        hue = this.brownHue;
      } else {
        hue = this.greenHue;
      }
      hue += Math.random() * 20 - 10;
      brightness = Math.random() * 20 + 25;
      this.ctx.fillStyle = "hsl(" + hue + ", " + this.saturation + "%, " + brightness + "%)";
      this.ctx.translate(this.position.x, this.position.y);
      this.ctx.rotate(-this.position.angle);
      this.ctx.fillRect(0, 0, this.size.width, -this.size.height);
      this.ctx.rotate(this.position.angle);
      return this.ctx.translate(-this.position.x, -this.position.y);
    };

    Rectangle.prototype.addAngle = Math.PI / 4;

    Rectangle.prototype.isGoingDown = function() {
      return Math.cos(this.position.angle) < 0;
    };

    Rectangle.prototype.divide = function() {
      var leftRect, rightRect;
      leftRect = new Rectangle({
        x: this.position.x + Math.cos(Math.PI / 2 + this.position.angle) * this.size.height,
        y: this.position.y - Math.sin(Math.PI / 2 + this.position.angle) * this.size.height,
        angle: this.position.angle + this.addAngle
      }, {
        width: this.size.width * Math.cos(this.addAngle),
        height: Math.cos(this.position.angle + this.addAngle) < 0 ? this.size.height * 0.6 : this.size.height * 0.75
      });
      leftRect.draw(this.ctx);
      rightRect = new Rectangle({
        x: leftRect.position.x + Math.cos(leftRect.position.angle) * leftRect.size.width,
        y: leftRect.position.y - Math.sin(leftRect.position.angle) * leftRect.size.width,
        angle: this.position.angle + this.addAngle - Math.PI / 2
      }, {
        width: this.size.width * Math.sin(this.addAngle),
        height: Math.cos(this.position.angle + this.addAngle) < 0 ? this.size.height * 0.6 : this.size.height * 0.75
      });
      return rightRect.draw(this.ctx);
    };

    return Rectangle;

  })();

  Tree = (function() {
    function Tree() {
      this.canvas = new DrawingCanvas($('canvas'));
      this.reGenerate();
    }

    Tree.prototype.reGenerate = function() {
      var rectPosition, size;
      size = {
        width: this.canvas.el.width * 0.1,
        height: this.canvas.el.width * 0.1 * 16 / 9
      };
      rectPosition = {
        x: this.canvas.el.width / 2 - size.width / 2,
        y: this.canvas.el.height,
        angle: 0
      };
      return this.baseRect = new Rectangle(rectPosition, size);
    };

    Tree.prototype.draw = function() {
      this.baseRect.draw(this.canvas.ctx);
      return this.baseRect.divide();
    };

    return Tree;

  })();

}).call(this);
