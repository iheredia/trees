// Generated by CoffeeScript 1.9.3
(function() {
  var DrawingCanvas, Rectangle, Tree,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DrawingCanvas = (function() {
    function DrawingCanvas($el) {
      this.$el = $el;
      this.setSizes = bind(this.setSizes, this);
      this.el = this.$el[0];
      $(window).resize(this.setSizes);
      this.setSizes();
      this.ctx = this.el.getContext('2d');
    }

    DrawingCanvas.prototype.setSizes = function() {
      if (this.el.width !== this.$el.width()) {
        this.el.width = this.$el.width();
      }
      if (this.el.height !== this.$el.height()) {
        return this.el.height = this.$el.height();
      }
    };

    DrawingCanvas.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, this.el.width, this.el.height);
    };

    return DrawingCanvas;

  })();

  $(function() {
    var tree;
    tree = new Tree;
    return tree.draw();
  });

  Rectangle = (function() {
    function Rectangle(position, size1) {
      this.position = position;
      this.size = size1;
      this.layer = 1;
    }

    Rectangle.prototype.brownHue = 40;

    Rectangle.prototype.greenHue = 115;

    Rectangle.prototype.saturation = 90;

    Rectangle.prototype.draw = function(ctx) {
      var brightness, hue;
      if (this.layer < 5) {
        hue = this.brownHue;
      } else {
        hue = this.greenHue;
      }
      hue += Math.random() * 20 - 10;
      brightness = Math.random() * 20 + 25;
      ctx.fillStyle = "hsl(" + hue + ", " + this.saturation + "%, " + brightness + "%)";
      ctx.translate(this.position.x, this.position.y);
      ctx.rotate(this.position.angle);
      ctx.fillRect(0, 0, this.size.width, this.size.height);
      ctx.rotate(-this.position.angle);
      return ctx.translate(-this.position.x, -this.position.y);
    };

    Rectangle.prototype.baseAngle = Math.PI / 4;

    return Rectangle;

  })();

  Tree = (function() {
    function Tree() {
      this.canvas = new DrawingCanvas($('canvas'));
      this.reGenerate();
    }

    Tree.prototype.reGenerate = function() {
      var rect, rectPosition, size;
      rectPosition = {
        x: this.canvas.el.width * 0.45,
        y: this.canvas.el.height * 0.95,
        angle: 0
      };
      size = {
        width: this.canvas.el.width * 0.1,
        height: this.canvas.el.height * 0.2
      };
      rect = new Rectangle(rectPosition, size);
      this.currentLayer = [];
      return this.currentLayer.push(rect);
    };

    Tree.prototype.draw = function() {
      var i, j, n, rect, ref, results;
      results = [];
      for (i = j = 0, ref = Math.min(500, this.currentLayer.length); 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        n = Math.round(Math.random() * this.currentLayer.length / 2);
        rect = this.currentLayer[n];
        results.push(rect.draw(this.canvas.ctx));
      }
      return results;
    };

    return Tree;

  })();

}).call(this);
